name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: finance_db
      DB_USER: finance_user
      DB_PASSWORD: supersecret
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      IMAGE_NAME: MohamedAmin1996/finance-tracker-app

    steps:
      # 1. Checkout latest code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup .NET SDK
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3. Install dotnet tools (optional lint/format tools)
      - name: Install dotnet format
        run: dotnet tool install -g dotnet-format

      # 4. Run linting / code style check
      - name: Run dotnet format (check only)
        run: dotnet format --verify-no-changes

      # 5. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore FinanceTrackerApp/FinanceTrackerApp.csproj

      # 6. Build the project
      - name: Build project
        run: dotnet build finance-tracker-csharp.sln --configuration Release 

      # 7. Run unit tests
      - name: Run xUnit tests
        run: dotnet test FinanceTrackerAppTest/FinanceTrackerAppTest.csproj --configuration Release --verbosity normal

      # 8. Publish the project
      - name: Publish project
        run: dotnet publish FinanceTrackerApp/FinanceTrackerApp.csproj -c Release -o ./publish

      # 9. Build Docker image
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .

      # 10. Run Docker containers for integration test
      - name: Run Docker containers for integration test
        run: |
          # 1. Create a network
          docker network create finance_network

          # 2. Start Postgres container
          docker run -d --name postgres \
            --network finance_network \
            -e POSTGRES_USER=finance_user \
            -e POSTGRES_PASSWORD=supersecret \
            -e POSTGRES_DB=finance_db \
            postgres:latest

          # 3. Wait for Postgres health
          until docker exec postgres pg_isready -U finance_user -d finance_db; do
            echo "Postgres is unavailable - sleeping"
            sleep 2
          done

          # 4. Start app container after Postgres is healthy
          docker run -d --name test-app \
            --network finance_network \
            -e DB_HOST=postgres \
            -e DB_PORT=5432 \
            -e DB_NAME=finance_db \
            -e DB_USER=finance_user \
            -e DB_PASSWORD=supersecret \
            $IMAGE_NAME

          # 5. Wait a few seconds for app to initialize
          sleep 10

          # 6. Show logs to verify connection
          docker logs test-app

      # 11. Stop and remove containers + network
      - name: Clean up Docker containers and network
        run: |
          docker stop test-app postgres
          docker rm test-app postgres
          docker network rm finance_network

      # 12. Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 13. Push Docker image
      - name: Push Docker image
        run: docker push $IMAGE_NAME
